digraph "classes" {
rankdir=BT
charset="utf-8"
"surfile.geometry.Circle" [color="#77AADD", fontcolor="black", label=<{Circle|<br ALIGN="LEFT"/>|formFit(obj: profile.Profile, cutter, finalize, bplt)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.extractor.ComplexExtractor" [color="#77AADD", fontcolor="black", label=<{ComplexExtractor|points : list<br ALIGN="LEFT"/>|apply(obj: surface.Surface, bplt)<br ALIGN="LEFT"/>profile(obj: surface.Surface, width, bplt)<br ALIGN="LEFT"/>template()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.cutter.Cutter" [color="#77AADD", fontcolor="black", label=<{Cutter|extents : NoneType<br ALIGN="LEFT"/>|<I>applyCut</I>(obj)<br ALIGN="LEFT"/><I>templateExtents</I>()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.geometry.Cylinder" [color="#77AADD", fontcolor="black", label=<{Cylinder|<br ALIGN="LEFT"/>|formFit(obj: surface.Surface, radius, alphaZ, alphaY, concavity, base, finalize, bplt)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.extractor.Extractor" [color="#77AADD", fontcolor="black", label=<{Extractor|options : NoneType<br ALIGN="LEFT"/>points : NoneType<br ALIGN="LEFT"/>|<I>apply</I>(obj: surface.Surface, bplt)<br ALIGN="LEFT"/><I>template</I>()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.geometry.FormEstimator" [color="#77AADD", fontcolor="black", label=<{FormEstimator|<br ALIGN="LEFT"/>|<I>applyFit</I>(obj, bplt)<br ALIGN="LEFT"/>plot3DForm(x, y, z, coeff)<br ALIGN="LEFT"/>plotForm(x, z, coeff)<br ALIGN="LEFT"/>remove3DForm(x, y, z, coeff)<br ALIGN="LEFT"/>removeForm(x, z, coeff)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.cutter.HistCutter" [color="#77AADD", fontcolor="black", label=<{HistCutter|<br ALIGN="LEFT"/>|cut(obj, bins, finalize)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.texture.Parameters" [color="#77AADD", fontcolor="black", label=<{Parameters|<br ALIGN="LEFT"/>|calc(obj: profile.Profile, rem: geometry.FormEstimator, fil: filter.Filter, bplt)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.profile.Profile" [color="#77AADD", fontcolor="black", label=<{Profile|X : NoneType, ndarray<br ALIGN="LEFT"/>X0 : NoneType, ndarray<br ALIGN="LEFT"/>Z : NoneType, ndarray<br ALIGN="LEFT"/>Z0 : NoneType, ndarray<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|fillNM(bplt)<br ALIGN="LEFT"/>openCHR(dirname, bplt)<br ALIGN="LEFT"/>openPrf(fname, bplt)<br ALIGN="LEFT"/>openTS(fname, bplt)<br ALIGN="LEFT"/>openTxt(fname, bplt, header)<br ALIGN="LEFT"/>pltCompare()<br ALIGN="LEFT"/>pltPrf()<br ALIGN="LEFT"/>saveTxt(fname)<br ALIGN="LEFT"/>setValues(X, Y, bplt)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.cutter.ProfileCutter" [color="#77AADD", fontcolor="black", label=<{ProfileCutter|extents : tuple<br ALIGN="LEFT"/>|applyCut(obj: profile.Profile, finalize)<br ALIGN="LEFT"/>circleCut(startP, bplt)<br ALIGN="LEFT"/>cut(obj: profile.Profile, finalize)<br ALIGN="LEFT"/>templateExtents()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.geometry.ProfileHistogram" [color="#77AADD", fontcolor="black", label=<{ProfileHistogram|<br ALIGN="LEFT"/>|remove(obj: profile.Profile, final_m, bplt)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.geometry.ProfileLSLine" [color="#77AADD", fontcolor="black", label=<{ProfileLSLine|<br ALIGN="LEFT"/>|applyFit(obj: profile.Profile, bplt)<br ALIGN="LEFT"/>formFit(obj: profile.Profile, bplt)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.analysis.ProfileMorph" [color="#77AADD", fontcolor="black", label=<{ProfileMorph|<br ALIGN="LEFT"/>|arcRadius(obj: profile.Profile, skip, bplt)<br ALIGN="LEFT"/>arcSlope(obj: profile.Profile, R)<br ALIGN="LEFT"/>grating_1d(obj: profile.Profile, nom_pitch, bplt)<br ALIGN="LEFT"/>histHeight(obj: profile.Profile, bins, bplt)<br ALIGN="LEFT"/>stepAuto(obj: profile.Profile, bplt)<br ALIGN="LEFT"/>wireParams(obj: profile.Profile, bplt)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.geometry.ProfilePolynomial" [color="#77AADD", fontcolor="black", label=<{ProfilePolynomial|bound : NoneType<br ALIGN="LEFT"/>comp<br ALIGN="LEFT"/>cutter : NoneType<br ALIGN="LEFT"/>degree<br ALIGN="LEFT"/>|applyFit(obj: profile.Profile, bplt)<br ALIGN="LEFT"/>formFit(obj: profile.Profile, degree, comp, bound, cutter, bplt)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.geometry.ProfileStitchError" [color="#77AADD", fontcolor="black", label=<{ProfileStitchError|<br ALIGN="LEFT"/>|remove(obj: profile.Profile, stitchPos, bplt)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.texture.Psd" [color="#77AADD", fontcolor="black", label=<{Psd|deltaX : NoneType<br ALIGN="LEFT"/>deltaY : NoneType<br ALIGN="LEFT"/>fx : NoneType<br ALIGN="LEFT"/>fy : NoneType<br ALIGN="LEFT"/>psd : NoneType<br ALIGN="LEFT"/>psdp : NoneType, ndarray<br ALIGN="LEFT"/>psdx : NoneType<br ALIGN="LEFT"/>psdy : NoneType<br ALIGN="LEFT"/>|angleIntegratedSpectra(df_fct, bplt)<br ALIGN="LEFT"/>averageSpectra(bplt)<br ALIGN="LEFT"/>evalPsd(obj: surface.Surface, bplt)<br ALIGN="LEFT"/>polarSpectra(df_fct, bplt)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.analysis.Roi" [color="#77AADD", fontcolor="black", label=<{Roi|X : list<br ALIGN="LEFT"/>Z : list<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"surfile.texture.Roi" [color="#77AADD", fontcolor="black", label=<{Roi|X<br ALIGN="LEFT"/>Z<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"surfile.extractor.SimpleExtractor" [color="#77AADD", fontcolor="black", label=<{SimpleExtractor|options : dict<br ALIGN="LEFT"/>|apply(obj: surface.Surface, bplt)<br ALIGN="LEFT"/>meanProfile(obj: surface.Surface, direction, cutter, bplt)<br ALIGN="LEFT"/>profile(obj: surface.Surface, direction, width, bplt)<br ALIGN="LEFT"/>template()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.geometry.Sphere" [color="#77AADD", fontcolor="black", label=<{Sphere|<br ALIGN="LEFT"/>|formFit(obj: surface.Surface, finalize, radius, concavity, bplt)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.extractor.SphereExtractor" [color="#77AADD", fontcolor="black", label=<{SphereExtractor|<br ALIGN="LEFT"/>|sphereProfile(obj: surface.Surface, startP, bplt)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.surface.Surface" [color="#77AADD", fontcolor="black", label=<{Surface|X : NoneType<br ALIGN="LEFT"/>X0 : NoneType<br ALIGN="LEFT"/>Y : NoneType<br ALIGN="LEFT"/>Y0 : NoneType<br ALIGN="LEFT"/>Z : NoneType, ndarray<br ALIGN="LEFT"/>Z0 : NoneType<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>rangeX : NoneType<br ALIGN="LEFT"/>rangeY : NoneType<br ALIGN="LEFT"/>x : NoneType, ndarray<br ALIGN="LEFT"/>y : NoneType, ndarray<br ALIGN="LEFT"/>|chauvenet(iterative, threshold, mean, stdv)<br ALIGN="LEFT"/>fillNM(method)<br ALIGN="LEFT"/>openFile(fname, bplt, interp)<br ALIGN="LEFT"/>openTxt(fname, bplt, typ)<br ALIGN="LEFT"/>plt3D()<br ALIGN="LEFT"/>pltC()<br ALIGN="LEFT"/>pltCompare()<br ALIGN="LEFT"/>resample(newXsize, newYsize)<br ALIGN="LEFT"/>rotate(angle)<br ALIGN="LEFT"/>saveAsc(fname)<br ALIGN="LEFT"/>saveTxt(fname)<br ALIGN="LEFT"/>toProfiles(axis)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.geometry.Surface3Points" [color="#77AADD", fontcolor="black", label=<{Surface3Points|<br ALIGN="LEFT"/>|remove(obj: surface.Surface, bplt)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.cutter.SurfaceCutter" [color="#77AADD", fontcolor="black", label=<{SurfaceCutter|extents : list, tuple<br ALIGN="LEFT"/>|applyCut(obj: surface.Surface, finalize)<br ALIGN="LEFT"/>cut(obj: surface.Surface, finalize)<br ALIGN="LEFT"/>templateExtents()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.geometry.SurfaceLSPlane" [color="#77AADD", fontcolor="black", label=<{SurfaceLSPlane|<br ALIGN="LEFT"/>|applyFit(obj: surface.Surface, bplt)<br ALIGN="LEFT"/>formFit(obj: surface.Surface, bplt)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.analysis.SurfaceMorph" [color="#77AADD", fontcolor="black", label=<{SurfaceMorph|<br ALIGN="LEFT"/>|cylinder(obj: surface.Surface, radius, phiCone, alphaZ, concavity, base, bplt)<br ALIGN="LEFT"/>grating_1d(obj: surface.Surface, nom_pitch, direction, bplt)<br ALIGN="LEFT"/>histHeight(obj: surface.Surface, bins, bplt)<br ALIGN="LEFT"/>sphereMaxMeasSlope(obj: surface.Surface, R, angleStep, start, bplt)<br ALIGN="LEFT"/>sphereRadius(obj: surface.Surface, angleStepSize, start, bplt)<br ALIGN="LEFT"/>wireParams(obj: surface.Surface, bplt)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.geometry.SurfacePolynomial" [color="#77AADD", fontcolor="black", label=<{SurfacePolynomial|bound : NoneType<br ALIGN="LEFT"/>comp<br ALIGN="LEFT"/>cutter : NoneType<br ALIGN="LEFT"/>full : bool<br ALIGN="LEFT"/>kx : int<br ALIGN="LEFT"/>ky : int<br ALIGN="LEFT"/>|applyFit(obj: surface.Surface, bplt)<br ALIGN="LEFT"/>formFit(obj: surface.Surface, kx, ky, full, comp, bound, cutter, bplt)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.stitcher.SurfaceStitcher" [color="#77AADD", fontcolor="black", label=<{SurfaceStitcher|<br ALIGN="LEFT"/>|stitchCorrelation(surl, surr, stitchPrc, samplingPrc, correlateDer, bplt)<br ALIGN="LEFT"/>stitchFGR(surl, surr, stitchPrc)<br ALIGN="LEFT"/>stitchMinimizeNorm(surl, surr, stitchPrc, pixelScan, bplt)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"surfile.cutter.HistCutter" -> "surfile.cutter.Cutter" [arrowhead="empty", arrowtail="none"];
"surfile.cutter.ProfileCutter" -> "surfile.cutter.Cutter" [arrowhead="empty", arrowtail="none"];
"surfile.cutter.SurfaceCutter" -> "surfile.cutter.Cutter" [arrowhead="empty", arrowtail="none"];
"surfile.extractor.ComplexExtractor" -> "surfile.extractor.Extractor" [arrowhead="empty", arrowtail="none"];
"surfile.extractor.SimpleExtractor" -> "surfile.extractor.Extractor" [arrowhead="empty", arrowtail="none"];
"surfile.extractor.SphereExtractor" -> "surfile.extractor.Extractor" [arrowhead="empty", arrowtail="none"];
"surfile.geometry.Circle" -> "surfile.geometry.FormEstimator" [arrowhead="empty", arrowtail="none"];
"surfile.geometry.Cylinder" -> "surfile.geometry.FormEstimator" [arrowhead="empty", arrowtail="none"];
"surfile.geometry.ProfileHistogram" -> "surfile.geometry.FormEstimator" [arrowhead="empty", arrowtail="none"];
"surfile.geometry.ProfileLSLine" -> "surfile.geometry.FormEstimator" [arrowhead="empty", arrowtail="none"];
"surfile.geometry.ProfilePolynomial" -> "surfile.geometry.FormEstimator" [arrowhead="empty", arrowtail="none"];
"surfile.geometry.ProfileStitchError" -> "surfile.geometry.FormEstimator" [arrowhead="empty", arrowtail="none"];
"surfile.geometry.Sphere" -> "surfile.geometry.FormEstimator" [arrowhead="empty", arrowtail="none"];
"surfile.geometry.Surface3Points" -> "surfile.geometry.FormEstimator" [arrowhead="empty", arrowtail="none"];
"surfile.geometry.SurfaceLSPlane" -> "surfile.geometry.FormEstimator" [arrowhead="empty", arrowtail="none"];
"surfile.geometry.SurfacePolynomial" -> "surfile.geometry.FormEstimator" [arrowhead="empty", arrowtail="none"];
}
